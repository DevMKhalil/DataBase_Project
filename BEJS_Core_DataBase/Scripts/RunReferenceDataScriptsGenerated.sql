

PRINT '     _  _                                       '
PRINT '    | || |  _            _                      '
PRINT '    | || |_| |_ ___  ___| |_ _   _ _ __ ___     '
PRINT '    |__   _| __/ _ \/ __| __| | | |  __/ _ \    '
PRINT '       |_| | ||  __/ (__| |_| |_| | | |  __/    '
PRINT '            \__\___|\___|\__|\__,_|_|  \___|    '
PRINT '                                                '
PRINT '        empower your software solutions         '
PRINT '                                                '

PRINT '******************* referencedata scripts *******************'

-- Start transaction for all referencedata scripts
BEGIN TRANSACTION;
BEGIN TRY

    DECLARE @DBEXISTS bit;
    SET @DBEXISTS = 0;

    DECLARE @DBNAME NVARCHAR(128);
    SET @DBNAME = DB_NAME();

    DECLARE @DBID INT;
    SET @DBID = DB_ID();

    IF NOT EXISTS(SELECT * FROM sys.databases WHERE name = @DBNAME)
    BEGIN
        PRINT 'The database ' +  @DBNAME + ' does not yet exist. All referencedata deployment scripts will be skipped.'
        SET @DBEXISTS = 0
    END
    ELSE
    BEGIN
        PRINT 'The database ' +  @DBNAME + ' already exists. referencedata deployment scripts will be executed.'
        SET @DBEXISTS = 1
    END
    
    -- Prefill the _MigrationScriptsHistory table with the existing migration scripts when applying the first time
    IF @DBEXISTS=1 AND 'referencedata'='referencedata'
    BEGIN    
        IF OBJECT_ID(N'dbo._MigrationScriptsHistory', N'U') IS NOT NULL
        BEGIN
            IF NOT EXISTS (SELECT * FROM [dbo].[_MigrationScriptsHistory])
            BEGIN
                PRINT N'Set default values for MigrationScriptsHistory';

                INSERT INTO [dbo].[_MigrationScriptsHistory] 
                VALUES
                    ('PreScripts\20171016123600_Initial_Setup.sql', GETUTCDATE(),'FtZ5yB+xpknBlTpdwS/yeQ==')
                    ,('PostScripts\20171016123600_SetupInitialData.sql', GETUTCDATE(),'hS0MUZNFcGCbbj3MjSfmPQ==')
                    ,('initialization\_migrationscriptshistory', GETUTCDATE(),'ZmI3OWI5ZThiOWU2ZGU5MTYwODFkYmJmN2M3ZjFlYzM=')
            END
            ELSE
            BEGIN
                PRINT N'MigrationScriptsHistory already has entries, skipping.';
            END
        END
        ELSE
        BEGIN
            RAISERROR ('ERROR: The migration script history table _MigrationScriptsHistory does not exists.', 18, 1);
        END
    END

    -- Only run scripts of type 'referencedata' if the database exists, otherwise skip.
    IF @DBEXISTS=1 AND 'referencedata'='referencedata'
    BEGIN    
        -- Run the new migration script
        PRINT '------------------ RUN --------------------------'
        PRINT 'Script Id:      ReferenceDataScripts\1_TravelBanType.sql'
        PRINT 'Script Name:    1_TravelBanType.sql'
        PRINT 'Order Criteria: 1'
        PRINT 'Script Type:    referencedata'
        PRINT 'Script Path:    C:\Users\NTG\source\repos\BEJS_Core_DataBase\BEJS_Core_DataBase\Scripts\ReferenceDataScripts\1_TravelBanType.sql'
        PRINT 'Script Hash:    I0MZ++RSANjXRYxXPU5Nag=='
        
        PRINT ' > Start referencedata-script run....'
        exec('
USE [BEJS_Core]

--MERGE generated by ''sp_generate_merge'' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

MERGE INTO [TrvBan].[TravelBanRequestStatus] AS [Target]
USING (VALUES
  (1,N''Waiting for Submission'',N''في انتظار تقديم الطلب'')
 ,(2,N''Partially Submitted'',N''تم التقديم جزئيا'')
 ,(3,N''Fully Submitted'',N''تم تقديم الطلب'')
) AS [Source] ([Code],[Name],[NameAr])
ON ([Target].[Code] = [Source].[Code])
WHEN MATCHED AND (
	NULLIF([Source].[Name], [Target].[Name]) IS NOT NULL OR NULLIF([Target].[Name], [Source].[Name]) IS NOT NULL OR 
	NULLIF([Source].[NameAr], [Target].[NameAr]) IS NOT NULL OR NULLIF([Target].[NameAr], [Source].[NameAr]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[Name] = [Source].[Name], 
  [Target].[NameAr] = [Source].[NameAr]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Code],[Name],[NameAr])
 VALUES([Source].[Code],[Source].[Name],[Source].[NameAr])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT ''ERROR OCCURRED IN MERGE FOR [TrvBan].[TravelBanRequestStatus]. Rows affected: '' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT ''[TrvBan].[TravelBanRequestStatus] rows affected by MERGE: '' + CAST(@mergeCount AS VARCHAR(100));
 END


SET NOCOUNT OFF
')
        PRINT ' > Finished referencedata-script run....'
        
        PRINT '----------------- END RUN ------------------------'
        PRINT '|'
    END
END TRY
BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();

    -- Rollback all transactions if any of the referencedata scripts failed.
    IF @@TRANCOUNT > 0  
        ROLLBACK TRANSACTION;

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

END CATCH;

-- Commit transaction if all referencedata scripts have been successfully run.
IF @@TRANCOUNT > 0  
    COMMIT TRANSACTION;  
GO